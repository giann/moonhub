local a="1.3.0"local b,c;do local d=table;b,c=d.insert,d.concat end;local e,f,g,h,i,j,k,l;do local d=_G;e,f,g,h,i,j,k,l=d.load,d.setfenv,d.assert,d.type,d.error,d.tostring,d.tonumber,d.setmetatable end;f=f or function(m,n)local o;local p=1;while true do o=debug.getupvalue(m,p)if not o or o=="_ENV"then break end;p=p+1 end;if o then debug.upvaluejoin(m,p,function()return n end,1)end;return m end;local q={['&']='&amp;',['<']='&lt;',['>']='&gt;',['"']='&quot;',["'"]='&#039;'}local r;r=function(s)return s:gsub([=[["><'&]]=],q)end;local t;t=function(s,u)for v in s:gmatch("([^\n]*)\n?")do if u==1 then return v end;u=u-1 end end;local w;w=function(s,x)local v=1;for y in s:sub(1,x):gmatch("\n")do v=v+1 end;return v end;local z;do local A;local B={render=function(self)return table.concat(self.buffer)end,push=function(self,s,...)local p=self.i+1;self.buffer[p]=s;self.i=p;if...then return self:push(...)end end,header=function(self)return self:push("local _tostring, _escape, _b, _b_i = ...\n")end,footer=function(self)return self:push("return _b")end,increment=function(self)return self:push("_b_i = _b_i + 1\n")end,mark=function(self,x)return self:push("--[[",j(x),"]] ")end,assign=function(self,...)self:push("_b[_b_i] = ",...)if...then return self:push("\n")end end}B.__index=B;A=l({__init=function(self)self.buffer={}self.i=0 end,__base=B,__name="Compiler"},{__index=B,__call=function(C,...)local D=l({},B)C.__init(D,...)return D end})B.__class=A;z=A end;local E;do local A;local B={open_tag="<%",close_tag="%>",modifiers="^[=-]",html_escape=true,next_tag=function(self)local F,G=self.str:find(self.open_tag,self.pos,true)if not F then self:push_raw(self.pos,#self.str)return false end;if not(F==self.pos)then self:push_raw(self.pos,F-1)end;self.pos=G+1;local H;if self.str:match(self.modifiers,self.pos)then do local I=self.str:sub(self.pos,self.pos)self.pos=self.pos+1;H=I end end;local J,K=self.str:find(self.close_tag,self.pos,true)if not J then return nil,self:error_for_pos(F,"failed to find closing tag")end;while self:in_string(self.pos,J)do J,K=self.str:find(self.close_tag,K,true)if not J then return nil,self:error_for_pos(F,"failed to find string close")end end;local L;if"-"==self.str:sub(J-1,J-1)then J=J-1;L=true end;self:push_code(H or"code",self.pos,J-1)self.pos=K+1;if L then do local M=self.str:match("^\n",self.pos)if M then self.pos=self.pos+#M end end end;return true end,in_string=function(self,F,G)local N=false;local O=nil;local P=false;local x=0;local Q=nil;local R=self.str:sub(F,G)for S in R:gmatch(".")do local T=false;repeat x=x+1;if Q then if x<=Q then T=true;break end;Q=nil end;if O then if O==S and not P then N=false;O=nil end else if S=="'"or S=='"'then O=S;N=true end;if S=="["then do local U=R:match("^%[=*%[",x)if U then local V=U:gsub("%[","]")local W,X=R:find(V,x,true)if not W then return true end;Q=X end end end end;P=S=="\\"T=true until true;if not T then break end end;return N end,push_raw=function(self,F,G)return b(self.chunks,self.str:sub(F,G))end,push_code=function(self,Y,F,G)return b(self.chunks,{Y,self.str:sub(F,G),F})end,compile=function(self,s)local Z,_=self:parse(s)if not Z then return nil,_ end;local m;m,_=self:load(self:chunks_to_lua())if not m then return nil,_ end;return function(...)local a0;a0,_=self:run(m,...)if a0 then return c(a0)else return nil,_ end end end,parse=function(self,s)self.str=s;g(h(self.str)=="string","expecting string for parse")self.pos=1;self.chunks={}while true do local a1,_=self:next_tag()if _ then return nil,_ end;if not a1 then break end end;return true end,parse_error=function(self,_,a2)local a3,a4=_:match("%[.-%]:(%d+): (.*)$")a3=k(a3)if not a3 then return end;local v=t(a2,a3)local a5=k(v:match("^%-%-%[%[(%d+)%]%]"))if not a5 then return end;return self:error_for_pos(a5,a4)end,error_for_pos=function(self,a5,a4)local a6=w(self.str,a5)local a7=t(self.str,a6)return j(a4).." ["..j(a6).."]: "..j(a7)end,load=function(self,a2,o)if o==nil then o="etlua"end;local a8;do local a9=a2;a8=function()do local aa=a9;a9=nil;return aa end end end;local m,_=e(a8,o)if not m then do local a4=self:parse_error(_,a2)if a4 then return nil,a4 end end;return nil,_ end;return m end,run=function(self,m,n,a0,p,...)if n==nil then n={}end;local ab=l({},{__index=function(self,o)local ac=n[o]if ac==nil then ac=_G[o]end;return ac end})if not a0 then a0={}p=0 end;f(m,ab)return m(j,r,a0,p,...)end,compile_to_lua=function(self,s,...)local Z,_=self:parse(s)if not Z then return nil,_ end;return self:chunks_to_lua(...)end,chunks_to_lua=function(self,ad)if ad==nil then ad=z end;local ae=ad()ae:header()local af=self.chunks;for ag=1,#af do local R=af[ag]local ah=h(R)if ah=="table"then ah=R[1]end;local ai=ah;if"string"==ai then ae:increment()ae:assign(("%q"):format(R))elseif"code"==ai then ae:mark(R[3])ae:push(R[2],"\n")elseif"="==ai or"-"==ai then ae:increment()ae:mark(R[3])ae:assign()if ah=="="and self.html_escape then ae:push("_escape(_tostring(",R[2],"))\n")else ae:push("_tostring(",R[2],")\n")end else i("unknown type "..j(ah))end end;ae:footer()return ae:render()end}B.__index=B;A=l({__init=function()end,__base=B,__name="Parser"},{__index=B,__call=function(C,...)local D=l({},B)C.__init(D,...)return D end})B.__class=A;E=A end;local aj;do local B=E()local ak=B.compile;aj=function(...)return ak(B,...)end end;local al;al=function(s,...)local m,_=aj(s)if m then return m(...)else return nil,_ end end;return{compile=aj,render=al,Parser=E,Compiler=z,_version=a}
